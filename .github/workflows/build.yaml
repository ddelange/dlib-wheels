name: Build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  # Build configuration
  WORKING_DIRECTORY: "dlib"
  BUILD_COMMIT: "v20.0"
  DLIB_BIN_VERSION: "20.0.0"
  CIBUILDWHEEL_VERSION: "3.2.1"
  
  # Python requirements
  CIBW_PROJECT_REQUIRES_PYTHON: ">=3.11"

jobs:
  # Build wheels for all platforms
  build_wheels:
    name: Build ${{ matrix.only }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64 - manylinux
          - { only: "cp311-manylinux_x86_64", os: "ubuntu-latest" }
          - { only: "cp312-manylinux_x86_64", os: "ubuntu-latest" }
          - { only: "cp313-manylinux_x86_64", os: "ubuntu-latest" }
          - { only: "cp314-manylinux_x86_64", os: "ubuntu-latest" }
          
          # Linux x86_64 - musllinux
          - { only: "cp311-musllinux_x86_64", os: "ubuntu-latest" }
          - { only: "cp312-musllinux_x86_64", os: "ubuntu-latest" }
          - { only: "cp313-musllinux_x86_64", os: "ubuntu-latest" }
          - { only: "cp314-musllinux_x86_64", os: "ubuntu-latest" }
          
          # Linux aarch64 - manylinux (native ARM runners)
          - { only: "cp311-manylinux_aarch64", os: "ubuntu-24.04-arm" }
          - { only: "cp312-manylinux_aarch64", os: "ubuntu-24.04-arm" }
          - { only: "cp313-manylinux_aarch64", os: "ubuntu-24.04-arm" }
          - { only: "cp314-manylinux_aarch64", os: "ubuntu-24.04-arm" }
          
          # Linux aarch64 - musllinux (native ARM runners)
          - { only: "cp311-musllinux_aarch64", os: "ubuntu-24.04-arm" }
          - { only: "cp312-musllinux_aarch64", os: "ubuntu-24.04-arm" }
          - { only: "cp313-musllinux_aarch64", os: "ubuntu-24.04-arm" }
          - { only: "cp314-musllinux_aarch64", os: "ubuntu-24.04-arm" }
          
          # macOS arm64
          - { only: "cp311-macosx_arm64", os: "macos-14" }
          - { only: "cp312-macosx_arm64", os: "macos-14" }
          - { only: "cp313-macosx_arm64", os: "macos-14" }
          - { only: "cp314-macosx_arm64", os: "macos-14" }
          
          # Windows AMD64
          - { only: "cp311-win_amd64", os: "windows-latest" }
          - { only: "cp312-win_amd64", os: "windows-latest" }
          - { only: "cp313-win_amd64", os: "windows-latest" }
          - { only: "cp314-win_amd64", os: "windows-latest" }

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha || github.ref }}
          submodules: true

      - name: Checkout dlib at specific version
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          git fetch --all
          git checkout $BUILD_COMMIT

      - name: Patch dlib configuration
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Update package name to dlib-bin
          sed -i'' -e "s/name='dlib'/name='dlib-bin'/" setup.py
          
          # Set explicit version
          sed -i'' -e "s/version=read_version_from_cmakelists('dlib\/CMakeLists.txt')/version='$DLIB_BIN_VERSION'/" setup.py
          
          # Update repository URL
          sed -i'' -e "s/url='https:\/\/github\.com\/davisking\/dlib'/url='https:\/\/github\.com\/alesanfra\/dlib-wheels'/" setup.py
          
          # Disable GUI support
          sed -i'' -e "s/_cmake_extra_options = \[\]/_cmake_extra_options = \['-DDLIB_NO_GUI_SUPPORT=ON'\]/" setup.py
          
          # Add CMake build requirement
          sed -i'' -e "s/requires = \[\"setuptools\", \"wheel\"\]/requires = \[\"setuptools\", \"wheel\", \"cmake>=3.31.0\"\]/" pyproject.toml
          
      # Note: version must match CIBUILDWHEEL_VERSION env var
      - name: Build wheels
        uses: pypa/cibuildwheel@v3.2.1
        with:
          only: ${{ matrix.only }}
          package-dir: ${{ env.WORKING_DIRECTORY }}
        env:
          CIBW_BUILD_VERBOSITY: 1
          CIBW_BEFORE_BUILD: pip install cmake
          CIBW_TEST_COMMAND: python -c "import dlib"
          MACOSX_DEPLOYMENT_TARGET: "14.0"

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.only }}
          path: wheelhouse/*.whl
 
  # Upload to PyPI on master branch
  upload_pypi:
    name: Publish to PyPI
    needs: [build_wheels]
    runs-on: ubuntu-latest
    
    # Only upload on master branch pushes
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    permissions:
      id-token: write  # Required for trusted publishing
    
    steps:
      - name: Download all wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: dist-*
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip_existing: true
